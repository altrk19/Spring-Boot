/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ConnAckPayload;
import io.swagger.model.ConnCheckPayload;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-04T20:50:49.881Z[GMT]")
@Api(value = "websocket", description = "the websocket API")
public interface WebsocketApi {

    @ApiOperation(value = "x-connCheckRole = client", nickname = "websocketPost", notes = "This is NOT real POST-200 OK messages - Indicating the websocket messaging for application level ping-pong, where client sends *connCheck* and $KANDY$ replies *connAck*", response = ConnAckPayload.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = { 
            @AuthorizationScope(scope = "openid", description = "retrieve ID token")
            }),
@Authorization(value = "oAuth2Password", scopes = { 
            @AuthorizationScope(scope = "openid", description = "retrieve ID token")
            })    }, tags={ "connCheck-connAck", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConnAckPayload.class) })
    @RequestMapping(value = "/websocket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ConnAckPayload> websocketPost(@ApiParam(value = "Websocket JSON message body for connCheck, sent by $KANDY$ as negotiated x-connCheckRole = server" ,required=true )  @Valid @RequestBody ConnCheckPayload body
);


    @ApiOperation(value = "x-connCheckRole = server", nickname = "websocketPut", notes = "This is NOT real POST-200 OK messages - Indicating the websocket messaging for application level ping-pong, where $KANDY$ sends *connCheck* and client replies *connAck*", response = ConnCheckPayload.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = { 
            @AuthorizationScope(scope = "openid", description = "retrieve ID token")
            }),
@Authorization(value = "oAuth2Password", scopes = { 
            @AuthorizationScope(scope = "openid", description = "retrieve ID token")
            })    }, tags={ "connCheck-connAck", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConnCheckPayload.class) })
    @RequestMapping(value = "/websocket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ConnCheckPayload> websocketPut(@ApiParam(value = "Websocket JSON message body for connAck in response to connCheck, sent by $KANDY$ as negotiated x-connCheckRole = client" ,required=true )  @Valid @RequestBody ConnAckPayload body
);

}
